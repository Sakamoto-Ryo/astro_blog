---
interface Props {
  title: string;
}

const { title } = Astro.props;
const isHomePage = Astro.url.pathname === '/';
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{title} | 个人博客</title>
  <link rel="stylesheet" href="/css/layout.css">
  <link rel="stylesheet" href="/css/dark-theme.css">
</head>
<body>
  <header>
    <nav>
      <div class="nav-container">
          {!isHomePage && (
            <button class="back-button" onclick="window.history.back()">
              <svg width="35" height="35" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M15 18l-6-6 6-6"/>
              </svg>
            </button>
          )}
          <a href="/" class="logo">我的博客</a>
        <ul class="nav-links">
          <li><a href="/">首页</a></li>
          <li><a href="/my-articles/">我的文章</a></li>
          <li><a href="/about/">关于</a></li>
          <li><button id="theme-toggle" class="theme-toggle" aria-label="切换主题">
            <svg id="theme-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
            </svg>
          </button></li>
        </ul>
      </div>
    </nav>
  </header>
  
  <slot />
  
  <footer>
    <div class="footer-content">
      <p>&copy; 2025 Sakamoto_Blog. 保留所有权利.</p>
    </div>
  </footer>
  
  <script>
    // 初始化主题
    function initTheme() {
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      // 如果有保存的主题则使用保存的，否则根据系统设置
      const initialTheme = savedTheme || (prefersDark ? 'dark' : 'light');
      document.documentElement.setAttribute('data-theme', initialTheme === 'dark' ? 'dark' : 'light');
      updateThemeIcon();
    }
    
    // 切换主题
    function toggleTheme() {
      const currentTheme = document.documentElement.getAttribute('data-theme');
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      updateThemeIcon();
    }
    
    // 更新主题图标
    function updateThemeIcon() {
      const themeIcon = document.getElementById('theme-icon');
      const currentTheme = document.documentElement.getAttribute('data-theme');
      
      if (themeIcon) {
        // 使用innerHTML直接设置SVG内容，更高效
        if (currentTheme === 'dark') {
          // 太阳图标 - 使用预定义的SVG路径字符串
          themeIcon.innerHTML = `
            <circle cx="12" cy="12" r="5"/>
            <line x1="12" y1="1" x2="12" y2="3"/>
            <line x1="12" y1="21" x2="12" y2="23"/>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
            <line x1="1" y1="12" x2="3" y2="12"/>
            <line x1="21" y1="12" x2="23" y2="12"/>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
          `;
        } else {
          // 月亮图标
          themeIcon.innerHTML = '<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>';
        }
      }
    }
    
    // 页面加载时初始化主题
    document.addEventListener('DOMContentLoaded', () => {
      initTheme();
      
      // 为主题切换按钮添加事件监听器
      const themeToggle = document.getElementById('theme-toggle');
      if (themeToggle) {
        themeToggle.addEventListener('click', toggleTheme);
      }
    });
  </script>
</body>
</html>